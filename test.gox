package main

import (
	"image"
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
)

const (
	screenWidth  = 400
	screenHeight = 400
	paddingtop   = 16
	spriteWidth  = 14
	spriteHeight = 16
	frameCount   = 4
)

type Game struct {
	spritesheet  *ebiten.Image
	frames       []*ebiten.Image
	currentFrame int
	tickCount    int
}

func (g *Game) Update() error {
	g.tickCount++
	if g.tickCount%30 == 0 { // Cambia de frame cada 10 ticks
		g.currentFrame = (g.currentFrame + 1) % frameCount
	}
	return nil
}

func (g *Game) Draw(screen *ebiten.Image) {
	op := &ebiten.DrawImageOptions{}
	for i := 0; i < frameCount; i++ {
		op.GeoM.Reset()
		op.GeoM.Translate(float64(60+i*40), 150) // Posición en la pantalla
		screen.DrawImage(g.frames[i], op)
	}
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (int, int) {
	return screenWidth, screenHeight
}

func main() {
	game := &Game{}

	// Cargar spritesheet
	img, _, err := ebitenutil.NewImageFromFile("./assets/player/ss.png")
	if err != nil {
		log.Fatal(err)
	}
	game.spritesheet = img

	// Extraer los frames desde la spritesheet
	for i := 0; i < frameCount; i++ {
		x := i * spriteWidth
		frame := game.spritesheet.SubImage(image.Rect(x, paddingtop, x+spriteWidth, paddingtop+spriteHeight)).(*ebiten.Image)
		game.frames = append(game.frames, frame)
	}

	// Ejecutar el juego
	ebiten.SetWindowSize(screenWidth, screenHeight)
	ebiten.SetWindowTitle("Animación con Spritesheet")
	if err := ebiten.RunGame(game); err != nil {
		log.Fatal(err)
	}
}
